@page "/admin/demosync"
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Newtonsoft.Json

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs

@using BlazorApp.Shared
@using BlazorApp.Client.Models

@inject NavigationManager Navigation
@inject ISessionStorageService sessionStorage

@inject RelazioniService RelazioniService

@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO;

@inject IWebAssemblyHostEnvironment Env

<h5>
    DemoSync

    <span>
        <SfButton IconCss="e-icons e-chevron-up" CssClass="e-small e-flat" Content=""></SfButton>
    </span>
    <span style="float: right;">
        <SfButton IconCss="e-icons icon-small icon-navy e-save" CssClass="e-flat btn-light" Content="Insert/Save"></SfButton>
        &nbsp;&nbsp;&nbsp;
        <SfButton IconCss="e-icons icon-small d-excel" CssClass="e-flat btn-light" Content="Elenco Pazienti"></SfButton>
        &nbsp;&nbsp;&nbsp;
        <SfButton IconCss="e-icons icon-small d-pdf" CssClass="e-flat btn-light" Content="Relazione" OnClick="() => PrintRelazione(1)"></SfButton>
        &nbsp;&nbsp;&nbsp;
        @* <SfButton IconCss="e-icons icon-navy e-print" CssClass="e-flat btn-light" Content=" Relazione Word" @onclick="@CreateWord"></SfButton> *@
        <SfButton IconCss="e-icons icon-small d-word" CssClass="e-flat btn-light" Content="Relazione" OnClick="() => CreateWord()"></SfButton>
    </span>
</h5>
@*
@functions {
    async void CreateWord()
    {
        //Creating a new document
        WordDocument document = new WordDocument();
        //Adding a new section to the document
        WSection section = document.AddSection() as WSection;
        //Set Margin of the section
        section.PageSetup.Margins.All = 72;
        //Set page size of the section
        section.PageSetup.PageSize = new Syncfusion.Drawing.SizeF(612, 792);

        //Create Paragraph styles
        WParagraphStyle style = document.AddParagraphStyle("Normal") as WParagraphStyle;
        style.CharacterFormat.FontName = "Calibri";
        style.CharacterFormat.FontSize = 11f;
        style.ParagraphFormat.BeforeSpacing = 0;
        style.ParagraphFormat.AfterSpacing = 8;
        style.ParagraphFormat.LineSpacing = 13.8f;

        style = document.AddParagraphStyle("Heading 1") as WParagraphStyle;
        style.ApplyBaseStyle("Normal");
        style.CharacterFormat.FontName = "Calibri Light";
        style.CharacterFormat.FontSize = 16f;
        style.CharacterFormat.TextColor = Syncfusion.Drawing.Color.FromArgb(46, 116, 181);
        style.ParagraphFormat.BeforeSpacing = 12;
        style.ParagraphFormat.AfterSpacing = 0;
        style.ParagraphFormat.Keep = true;
        style.ParagraphFormat.KeepFollow = true;
        style.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;

        IWParagraph paragraph = section.HeadersFooters.Header.AddParagraph();
        paragraph.ApplyStyle("Normal");
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Left;
        WTextRange textRange = paragraph.AppendText("Adventure Works Cycles") as WTextRange;
        textRange.CharacterFormat.FontSize = 12f;
        textRange.CharacterFormat.FontName = "Calibri";
        textRange.CharacterFormat.TextColor = Syncfusion.Drawing.Color.Red;

        //Appends paragraph
        paragraph = section.AddParagraph();
        paragraph.ApplyStyle("Heading 1");
        paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        textRange = paragraph.AppendText("Adventure Works Cycles") as WTextRange;
        textRange.CharacterFormat.FontSize = 18f;
        textRange.CharacterFormat.FontName = "Calibri";

        //Appends paragraph
        paragraph = section.AddParagraph();
        paragraph.ParagraphFormat.FirstLineIndent = 36;
        paragraph.BreakCharacterFormat.FontSize = 12f;
        textRange = paragraph.AppendText("Adventure Works Cycles, the fictitious company on which the AdventureWorks sample databases are based, is a large, multinational manufacturing company. The company manufactures and sells metal and composite bicycles to North American, European and Asian commercial markets. While its base operation is in Bothell, Washington with 290 employees, several regional sales teams are located throughout their market base.") as WTextRange;
        textRange.CharacterFormat.FontSize = 12f;

        //Appends paragraph
        paragraph = section.AddParagraph();
        paragraph.ParagraphFormat.FirstLineIndent = 36;
        paragraph.BreakCharacterFormat.FontSize = 12f;
        textRange = paragraph.AppendText("In 2000, AdventureWorks Cycles bought a small manufacturing plant, Importadores Neptuno, located in Mexico. Importadores Neptuno manufactures several critical subcomponents for the AdventureWorks Cycles product line. These subcomponents are shipped to the Bothell location for final product assembly. In 2001, Importadores Neptuno, became the sole manufacturer and distributor of the touring bicycle product group.") as WTextRange;
        textRange.CharacterFormat.FontSize = 12f;

        //Saves the Word document to MemoryStream
        MemoryStream stream = new MemoryStream();
        document.Save(stream, FormatType.Docx);
        //Closes the Word document
        document.Close();
        stream.Position = 0;
        //Download the Word document in the browser
        JS.SaveAs("Sample.docx", stream.ToArray());
    }
}
*@
<div class="container-fluid" style="padding: 0 20px;">
    <div class="row">
        <div class="col-sm-1">
            <SfTextBox Placeholder="Cod" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-3">
            <SfTextBox Placeholder="Cognome" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-3">
            <SfTextBox Placeholder="Nome" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-1">
            <SfMaskedTextBox Mask="00/00/0000" Placeholder="Data di nascita" FloatLabelType="@FloatLabelType.Auto"></SfMaskedTextBox>
        </div>

        <div class="col-sm-1">
            <SfTextBox Placeholder="Cod. Fiscale" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            <SfTextBox Placeholder="Indirizzo" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-2">
            <SfTextBox Placeholder="Città" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-1">
            <SfTextBox Placeholder="CAP" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-2">
            <SfTextBox Placeholder="Stato" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-1">
            <SfTextBox Placeholder="Telefono" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-1">
            <SfTextBox Placeholder="Mobile" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>

        <div class="col-sm-4">
            <SfTextBox Placeholder="Email" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-9">
            <SfTextBox Placeholder="Note" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        </div>
    </div>
    <div class="row">
        <span style="color: rgba(0, 0, 0, 0.54);font-size: 13px;line-height: 1.4;">Privacy</span>
        <div class="col-sm-1">
            <label style="padding: 0 8px 0 0;">Firmata</label>
            <SfSwitch TChecked="bool"></SfSwitch>
        </div>
    </div>
</div>

<br />
<br />
<br />

<div class="container" style="padding: 0 10px;">
    <div class="row">
        <div class="col-xs-5">
            <div class="row">
            </div>
        </div>

        <div class="col-xs-7">
            <div class="row">
            </div>
        </div>
    </div>
</div>

<div class="bg-info clearfix">
    <button type="button" class="btn btn-secondary float-start">Example Button floated left</button>
    <button type="button" class="btn btn-secondary float-end">Example Button floated right</button>
</div>

<br />

<div class="bg-light clearfix">
    <button type="button" class="btn btn-primary float-start">Example Button floated left</button>
    <button type="button" class="btn btn-link float-end">Example Button floated right</button>
</div>

<br />

<div class="form-row add-item">
    <div class="form-group col-sm-12" style="border-bottom: 1px solid #ff6a00;">
        <SfButton IconCss="e-icons e-addcircle" CssClass="e-small e-flat" Content="Inserisci paziente"></SfButton>
    </div>
</div>

<div class="form-group col-sm-12 form-filter">
    <div class="form-row menten">
        <div class="form-group col-sm-1" style="padding-top: 4px; text-align: right;">
            Nome:
        </div>
        <div class="form-group col-sm-2">
            <SfTextBox ID="fname" height="14px;"></SfTextBox>
        </div>
        <div class="form-group col-sm-1" style="padding-top: 4px; text-align: right;">
            Cognome:
        </div>
        <div class="form-group col-sm-2">
            <SfTextBox ID="lname"></SfTextBox>
        </div>
    </div>

    <div class="form-row menten">
        <div class="form-group col-sm-1" style="padding-top: 4px; margin: 10px 0 16px 0; text-align: right; line-height:18px;">
            <span>Data di nascita:</span><br />
            <span style="font-size:85%; display:inline-block; width: 80px; color:#555; margin-right:2px;">(gg/mm/aaaa)</span>
        </div>
        <div class="form-group col-sm-2" style="margin: 10px 0 16px 0;">
            <SfDatePicker ID="birthdate" TValue="DateTime" Placeholder="data di nascita" Format="dd/MM/yyyy" AllowEdit="true">
            </SfDatePicker>
        </div>
        <div class="form-group col-sm-1" style="padding-top: 4px; text-align: right;">
            Telefono:
        </div>
        <div class="form-group col-sm-2">
            <SfTextBox ID="telefono"></SfTextBox>
        </div>
    </div>

    <br />

    <div class="form-row menten">
        <div class="form-group col-sm-1" style="padding-top: 4px; margin: 10px 0 16px 0; text-align: right; line-height:18px;">
            <span>Data di nascita 2:</span><br />
            <span style="font-size:85%; display:inline-block; width: 80px; color:#555; margin-right:2px;">(gg/mm/aaaa)</span>
        </div>
        <div class="form-group col-sm-2" style="margin: 10px 0 16px 0;">
            <SfTextBox ID="giorno"></SfTextBox> / 
            <SfTextBox ID="mese"></SfTextBox> / 
            <SfTextBox ID="anno"></SfTextBox>
        </div>
    </div>

    <br />

    <div class="form-row">
        <div class="form-group col-sm-1">&nbsp;</div>
        <div class="actionBtn">
            <SfButton IconCss="e-icons search icon-navy e-search" CssClass="e-small" Content="Cerca"></SfButton>
        </div>
        <div class="actionBtn">
            <SfButton IconCss="e-icons icon-small e-reload" CssClass="e-small" Content="Ripristina"></SfButton>
        </div>
    </div>
</div>

<br />

<form class="row g-3">
    <div class="col-md-6">
        <label for="inputEmail4" class="form-label">Email</label>
        <input type="email" class="form-control" id="inputEmail4">
    </div>
    <div class="col-md-6">
        <label for="inputPassword4" class="form-label">Password</label>
        <input type="password" class="form-control" id="inputPassword4">
    </div>
    <div class="col-12">
        <label for="inputAddress" class="form-label">Address</label>
        <input type="text" class="form-control" id="inputAddress" placeholder="1234 Main St">
    </div>
    <div class="col-12">
        <label for="inputAddress2" class="form-label">Address 2</label>
        <input type="text" class="form-control" id="inputAddress2" placeholder="Apartment, studio, or floor">
    </div>
    <div class="col-md-6">
        <label for="inputCity" class="form-label">City</label>
        <input type="text" class="form-control" id="inputCity">
    </div>
    <div class="col-md-4">
        <label for="inputState" class="form-label">State</label>
        <select id="inputState" class="form-select">
            <option selected>Choose...</option>
            <option>...</option>
        </select>
    </div>
    <div class="col-md-2">
        <label for="inputZip" class="form-label">Zip</label>
        <input type="text" class="form-control" id="inputZip">
    </div>
    <div class="col-12">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="gridCheck">
            <label class="form-check-label" for="gridCheck">
                Check me out
            </label>
        </div>
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-primary">Sign in</button>
    </div>
</form>

<br />

<form>
    <div class="row mb-3">
        <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
        <div class="col-sm-10">
            <input type="email" class="form-control" id="inputEmail3">
        </div>
    </div>
    <div class="row mb-3">
        <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
        <div class="col-sm-10">
            <input type="password" class="form-control" id="inputPassword3">
        </div>
    </div>
    <fieldset class="row mb-3">
        <legend class="col-form-label col-sm-2 pt-0">Radios</legend>
        <div class="col-sm-10">
            <div class="form-check">
                <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios1" value="option1" checked>
                <label class="form-check-label" for="gridRadios1">
                    First radio
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="option2">
                <label class="form-check-label" for="gridRadios2">
                    Second radio
                </label>
            </div>
            <div class="form-check disabled">
                <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios3" value="option3" disabled>
                <label class="form-check-label" for="gridRadios3">
                    Third disabled radio
                </label>
            </div>
        </div>
    </fieldset>
    <div class="row mb-3">
        <div class="col-sm-10 offset-sm-2">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="gridCheck1">
                <label class="form-check-label" for="gridCheck1">
                    Example checkbox
                </label>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Sign in</button>
</form>

<br />

<div class="row">
    <div class="col">
        <input type="text" class="form-control" placeholder="First name" aria-label="First name">
    </div>
    <div class="col">
        <input type="text" class="form-control" placeholder="Last name" aria-label="Last name">
    </div>
</div>

<br />
<br />
<br />
<br />

<style>
    .control-wrapper {
    max-width: 100%;
    margin: 0 auto;
    padding: 50px 0px 0px;
    }
</style>

@code {
    bool FirstPage;
    string LName = "Cesare";
    string FName = "Caio Giulio";

    #region logging
    string? LoggedUser;
    string[]? arUser;

    private string? gIdUser;
    private string? gFName;
    private string? gLName;
    private string? gSuperUser;

    private string? SessionID;

    //private string[] gRoleUser;

    private string sessionLoggedUser { get; set; }
    #endregion

    #region binding relazioni
    public Boolean RelazioniDisabled = true;
    public string pDataRelazione = "28032025";
    private Relazioni Relazione = new Relazioni();
    #endregion

    #region Funzioni di supporto
    private string SetObjNullToStr(object obj)
    {
        string result = "";

        if ((obj == null) || (obj.Equals(System.DBNull.Value)))
        {
            result = "";
        }
        else
        {
            result = obj.ToString();
        }

        return result;
    }

    public async void GoToPatientList(decimal id)
    {
        await Task.Delay(10);
        Navigation.NavigateTo("/patientlist/" + id.ToString());
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        sessionLoggedUser = await sessionStorage.GetItemAsStringAsync("sessionLoggedUser");

        if (string.IsNullOrEmpty(sessionLoggedUser))
        {
            Navigation.NavigateTo("/auth/login");
        }
        else
        {
            LoggedUser = sessionLoggedUser.Substring(1, sessionLoggedUser.Length - 2);

            arUser = LoggedUser.Split(",");

            gIdUser = arUser[0];
            gFName = arUser[1];
            gLName = arUser[2];
            gSuperUser = arUser[3];

            SessionID = arUser[4];

            LoadRelazione(10);
        }
    }

    #region Relazioni
    public async void LoadRelazione(decimal idv)
    {
        Console.WriteLine($"📌 LoadRelazione({idv})");

        Relazione = new Relazioni();

        Relazione = await RelazioniService.GetRelazione(idv);

        if (Relazione.IdRelazione != 0)
        {
            Relazione.DiagnosiOD = SetObjNullToStr(Relazione.DiagnosiOD);
            Relazione.DiagnosiOS = SetObjNullToStr(Relazione.DiagnosiOS);

            Relazione.SHIRMER_Od = SetObjNullToStr(Relazione.SHIRMER_Od);
            Relazione.SHIRMER_Os = SetObjNullToStr(Relazione.SHIRMER_Os);

            Relazione.Seg_Ant_Od = SetObjNullToStr(Relazione.Seg_Ant_Od);
            Relazione.Seg_Ant_Os = SetObjNullToStr(Relazione.Seg_Ant_Os);

            Relazione.Visus_Od = SetObjNullToStr(Relazione.Visus_Od);
            Relazione.Visus_Os = SetObjNullToStr(Relazione.Visus_Os);

            Relazione.TONO_Od = SetObjNullToStr(Relazione.TONO_Od);
            Relazione.TONO_Os = SetObjNullToStr(Relazione.TONO_Os);

            Relazione.Fundus_Od = SetObjNullToStr(Relazione.Fundus_Od);
            Relazione.Fundus_Os = SetObjNullToStr(Relazione.Fundus_Os);

            pDataRelazione = Relazione.PrintDate.ToShortDateString();

            Console.WriteLine($"✅ Relazione.IdRelazione: {Relazione.IdRelazione}");
            Console.WriteLine($"✅ Relazione.ptIdUser: {Relazione.ptIdUser}");
            Console.WriteLine($"✅ Relazione.ptIdVisit: {Relazione.ptIdVisit}");
            Console.WriteLine($"✅ Relazione.DataRelazione: {Relazione.DataRelazione}");
            Console.WriteLine($"✅ Relazione.PrintDate: {Relazione.PrintDate}");
        }
        else
        {

            Console.WriteLine($"❌ Relazione.IdRelazione: {Relazione.IdRelazione}");
            Console.WriteLine($"❌ Relazione.ptIdUser: {Relazione.ptIdUser}");
            Console.WriteLine($"❌ Relazione.ptIdVisit: {Relazione.ptIdVisit}");
            Console.WriteLine($"❌ Relazione.DataRelazione: {Relazione.DataRelazione}");
            Console.WriteLine($"❌ Relazione.PrintDate: {Relazione.PrintDate}");
        }

        StateHasChanged();
    }
    #endregion

    #region pdf
    void Pages_PageAdded(object sender, PageAddedEventArgs args)
    {
        PdfPage page = args.Page;
        PdfGraphics g = page.Graphics;

        int FirstLay;

        if (FirstPage)
        {
            FirstLay = 0;
            FirstPage = false;
        }
        else
        {
            FirstLay = 1;
        }

        // Setup font for Dati Testata
        PdfStandardFont SideFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold | PdfFontStyle.Italic);
        // PdfStandardFont FootFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Bold | PdfFontStyle.Italic);

        PdfPen pen = new PdfPen(Color.Black);
        pen.Width = 0.1F;

        PointF p1 = new PointF();
        PointF p2 = new PointF();

        // linea verticale sinistra
        p1.X = 85;
        p1.Y = 70 - FirstLay * 70;

        p2.X = 85;
        p2.Y = 842 - (2 - FirstLay) * 70;

        g.DrawLine(pen, p1, p2);

        //
        // linea verticale destra
        // p1.X = 545;
        // p1.Y = 0;

        // p2.X = 545;
        // p2.Y = 840;

        // g.DrawLine(pen, p1, p2);

        // 1a linea orizzontale
        // p1.X = 0;
        // p1.Y = 70 - FirstLay * 70;

        // p2.X = 545;
        // p2.Y = 70 - FirstLay * 70;

        // g.DrawLine(pen, p1, p2);

        // 2a linea orizzontale
        // p1.X = 0;
        // p1.Y = 710;

        // p2.X = 545;
        // p2.Y = 710;

        // g.DrawLine(pen, p1, p2);

        // PdfPen penT = new PdfPen(Color.Orange);
        // penT.Width = 0.1F;

        // Microchirurgia Oculare up
        // p1.X = 0;
        // p1.Y = 100;

        // p2.X = 545;
        // p2.Y = 100;

        // g.DrawLine(penT, p1, p2);

        // Microchirurgia Oculare down
        // p1.X = 0;
        // p1.Y = 120;

        // p2.X = 545;
        // p2.Y = 120;

        // g.DrawLine(penT, p1, p2);

        // Chirurgia Oftalmoplastica up
        // p1.X = 0;
        // p1.Y = 153;

        // p2.X = 545;
        // p2.Y = 153;

        // g.DrawLine(penT, p1, p2);

        // Chirurgia Oftalmoplastica down
        // p1.X = 0;
        // p1.Y = 173;

        // p2.X = 545;
        // p2.Y = 173;

        // g.DrawLine(penT, p1, p2);

        // Chirurgia Refrattiva, Miopia, Ipermetropia, Astigmatismo up
        // p1.X = 0;
        // p1.Y = 206;

        // p2.X = 545;
        // p2.Y = 206;

        // g.DrawLine(penT, p1, p2);

        // Chirurgia Refrattiva, Miopia, Ipermetropia, Astigmatismo down
        // p1.X = 0;
        // p1.Y = 262;

        // p2.X = 545;
        // p2.Y = 262;

        // g.DrawLine(penT, p1, p2);

        // Laser Terapia, Chirurgia, Vitreo-Retinica up
        // p1.X = 0;
        // p1.Y = 295;

        // p2.X = 545;
        // p2.Y = 295;

        // g.DrawLine(penT, p1, p2);

        // Laser Terapia, Chirurgia, Vitreo-Retinica down
        // p1.X = 0;
        // p1.Y = 327;

        // p2.X = 545;
        // p2.Y = 327;

        // g.DrawLine(penT, p1, p2);

        // Topografia Corneale up
        // p1.X = 0;
        // p1.Y = 360;

        // p2.X = 545;
        // p2.Y = 360;

        // g.DrawLine(penT, p1, p2);

        // Topografia Corneale down
        // p1.X = 0;
        // p1.Y = 380;

        // p2.X = 545;
        // p2.Y = 380;

        // g.DrawLine(penT, p1, p2);

        // Ecografia up
        // p1.X = 0;
        // p1.Y = 413;

        // p2.X = 545;
        // p2.Y = 413;

        // g.DrawLine(penT, p1, p2);

        // Ecografia down
        // p1.X = 0;
        // p1.Y = 421;

        // p2.X = 545;
        // p2.Y = 421;

        // g.DrawLine(penT, p1, p2);

        // Fluorangiografia, Angiografia con, verde di, indocianina up
        // p1.X = 0;
        // p1.Y = 454;

        // p2.X = 545;
        // p2.Y = 454;

        // g.DrawLine(penT, p1, p2);

        // Fluorangiografia, Angiografia con, verde di, indocianina down
        // p1.X = 0;
        // p1.Y = 498;

        // p2.X = 545;
        // p2.Y = 498;

        // g.DrawLine(penT, p1, p2);

        // Campo Visivo up
        // p1.X = 0;
        // p1.Y = 531;

        // p2.X = 545;
        // p2.Y = 531;

        // g.DrawLine(penT, p1, p2);

        // Campo Visivo down
        // p1.X = 0;
        // p1.Y = 539;

        // p2.X = 545;
        // p2.Y = 539;

        // g.DrawLine(penT, p1, p2);

        // Tomografia Coerenza Ottica (O.C.T.). up
        // p1.X = 0;
        // p1.Y = 572;

        // p2.X = 545;
        // p2.Y = 572;

        // g.DrawLine(penT, p1, p2);

        // Tomografia Coerenza Ottica (O.C.T.) down
        // p1.X = 0;
        // p1.Y = 604;

        // p2.X = 545;
        // p2.Y = 604;

        // g.DrawLine(penT, p1, p2);

        // Angio - O.C.T. up
        // p1.X = 0;
        // p1.Y = 637;

        // p2.X = 545;
        // p2.Y = 637;

        // g.DrawLine(penT, p1, p2);

        // Angio - O.C.T. down
        // p1.X = 0;
        // p1.Y = 645;

        // p2.X = 545;
        // p2.Y = 645;

        // g.DrawLine(penT, p1, p2);

        // R.N.F.L. up
        // p1.X = 0;
        // p1.Y = 678;

        // p2.X = 545;
        // p2.Y = 678;

        // g.DrawLine(penT, p1, p2);

        // R.N.F.L. down
        // p1.X = 0;
        // p1.Y = 686;

        // p2.X = 545;
        // p2.Y = 686;

        // g.DrawLine(penT, p1, p2);
        //

        g.DrawString("Microchirurgia", SideFont, PdfBrushes.Black, 0, 98 - FirstLay * 70);
        g.DrawString("Oculare", SideFont, PdfBrushes.Black, 0, 110 - FirstLay * 70);

        g.DrawString("Chirurgia", SideFont, PdfBrushes.Black, 0, 151 - FirstLay * 70);
        g.DrawString("Oftalmoplastica", SideFont, PdfBrushes.Black, 0, 163 - FirstLay * 70);

        g.DrawString("Chirurgia", SideFont, PdfBrushes.Black, 0, 204 - FirstLay * 70);
        g.DrawString("Refrattiva", SideFont, PdfBrushes.Black, 0, 216 - FirstLay * 70);
        g.DrawString("Miopia", SideFont, PdfBrushes.Black, 0, 228 - FirstLay * 70);
        g.DrawString("Ipermetropia", SideFont, PdfBrushes.Black, 0, 240 - FirstLay * 70);
        g.DrawString("Astigmatismo", SideFont, PdfBrushes.Black, 0, 252 - FirstLay * 70);

        g.DrawString("Laser Terapia", SideFont, PdfBrushes.Black, 0, 293 - FirstLay * 70);
        g.DrawString("Chirurgia", SideFont, PdfBrushes.Black, 0, 305 - FirstLay * 70);
        g.DrawString("Vitreo-Retinica", SideFont, PdfBrushes.Black, 0, 317 - FirstLay * 70);

        g.DrawString("Topografia", SideFont, PdfBrushes.Black, 0, 358 - FirstLay * 70);
        g.DrawString("Corneale", SideFont, PdfBrushes.Black, 0, 370 - FirstLay * 70);

        g.DrawString("Ecografia", SideFont, PdfBrushes.Black, 0, 411 - FirstLay * 70);

        g.DrawString("Fluorangiografia", SideFont, PdfBrushes.Black, 0, 452 - FirstLay * 70);
        g.DrawString("Angiografia con", SideFont, PdfBrushes.Black, 0, 464 - FirstLay * 70);
        g.DrawString("verde di", SideFont, PdfBrushes.Black, 0, 476 - FirstLay * 70);
        g.DrawString("indocianina", SideFont, PdfBrushes.Black, 0, 488 - FirstLay * 70);

        g.DrawString("Campo Visivo", SideFont, PdfBrushes.Black, 0, 529 - FirstLay * 70);

        g.DrawString("Tomografia", SideFont, PdfBrushes.Black, 0, 570 - FirstLay * 70);
        g.DrawString("Coerenza Ottica", SideFont, PdfBrushes.Black, 0, 582 - FirstLay * 70);
        g.DrawString("(O.C.T.)", SideFont, PdfBrushes.Black, 0, 594 - FirstLay * 70);

        g.DrawString("Angio - O.C.T.", SideFont, PdfBrushes.Black, 0, 635 - FirstLay * 70);

        g.DrawString("R.N.F.L.", SideFont, PdfBrushes.Black, 0, 676 - FirstLay * 70);

        // g.DrawString("Viale Raffaello Sanzio, 60 – scala C, 5° piano – (Piazza Michelangelo) - 95128 Catania (CT)", FootFont, PdfBrushes.Red, 141, 719);
        // g.DrawString("Riceve per appuntamento – Tel/Fax: 095371701", FootFont, PdfBrushes.Red, 220, 732);
        // g.DrawString("Sito Web: http://www.studiolabruna.it – email: info@studiolabruna.it", FootFont, PdfBrushes.Red, 180, 745);
        // g.DrawString("Iscriz. Ord. Dei Medici di CT- Pietro La Bruna n° 5133 / Marco La Bruna n° 14037", FootFont, PdfBrushes.Red, 152, 758);

        // FirstLay = 1;
    }

    private string CustomDate(string val)
    {
        string result = "";

        if ((val == null) || (val == "") || (val.Equals(System.DBNull.Value)))
        {
            result = "";
        }
        else
        {
            result = val.Substring(0, 2) + "/" + val.Substring(2, 2) + "/" + val.Substring(4, 4);
        }

        return result;
    }

    public static string Eta(string data1, string data2)
    {
        string result = "";

        // Verifica che le date siano valide
        if (!DateTime.TryParse(data1, out DateTime primaData))
        {
            //throw new ArgumentException("La prima data non è valida.");
            result = "";
        }

        if (!DateTime.TryParse(data2, out DateTime secondaData))
        {
            //throw new ArgumentException("La seconda data non è valida.");
            result = "";
        }

        // Calcolo della differenza in anni
        int anniDifferenza = secondaData.Year - primaData.Year;

        // Aggiusta se il compleanno non è ancora passato nell'anno corrente
        if (secondaData < primaData.AddYears(anniDifferenza))
        {
            anniDifferenza--;
        }

        result = Math.Abs(anniDifferenza).ToString();

        // return Math.Abs(anniDifferenza); // Restituisce sempre un valore positivo

        return result;
    }

    private string FillEmpty(object val)
    {
        string result = "";

        if ((val == null) || (val.ToString() == "") || (val.Equals(System.DBNull.Value)))
        {
            result = " ";
        }
        else
        {
            result = val.ToString();
        }

        return result;
    }

    async void PrintRelazione(int who)
    {
        int paragraphAfterSpacing = 8;
        // int cellMargin = 8;

        string doctor = "";
        string specialization = "";
        string address = "V.le R. Sanzio, 60 Tel 095 371701";
        string city = "CATANIA";
        string codfisc = "";
        string piva = "";
        string ordine = "";

        string iscrOrdine = "";

        string relData = "";

        if (who == 1)
        {
            doctor = "MARCO LA BRUNA";
            specialization = "Specialista in Oftalmologia";
            codfisc = "Cod. Fisc. LBR MRC 84M31 C351P";
            piva = "Partita IVA 05289740879";
            ordine = "Ordine dei Medici CT n° 14037";

            iscrOrdine = "Iscriz. Ord. Dei Medici di CT - Marco La Bruna n° 14037";
        }
        else
        {
            doctor = "PIETRO LA BRUNA";
            specialization = "Specialista in Oculistica";
            codfisc = "Cod. Fisc. LBR PTR 49T07 H221S";
            piva = "Partita IVA 00635170871";
            // ordine = "Ordine dei Medici CT n° 5133";

            iscrOrdine = "Iscriz. Ord. Dei Medici di CT - Pietro La Bruna n° 5133";
        }

        FirstPage = true;

        Console.WriteLine($"🔥 pDataRelazione: {pDataRelazione}");
        Console.WriteLine($"🔥 pDataRelazione.Length: {pDataRelazione.Length}");
        if (pDataRelazione.Length > 8)
        {
            relData = pDataRelazione.Substring(0, 2) + "." + pDataRelazione.Substring(3, 2) + "." + pDataRelazione.Substring(6, 4);
        }
        else
        {
            relData = pDataRelazione.Substring(0, 2) + "." + pDataRelazione.Substring(2, 2) + "." + pDataRelazione.Substring(4, 4);
        }
        Console.WriteLine($"🔥 relData: {relData}");

        //Create a new PDF document.
        PdfDocument pdfDocument = new PdfDocument();

        // Add the event.
        // ------------------------------------------------------------------------------------------------------------------------
        pdfDocument.Pages.PageAdded += Pages_PageAdded;
        // ------------------------------------------------------------------------------------------------------------------------

        #region Definizione documento pdf
        // Set document information
        // ------------------------------------------------------------------------------------------------------------------------
        pdfDocument.DocumentInformation.Author = "Powered by Phoenix";
        pdfDocument.DocumentInformation.CreationDate = DateTime.Now;
        pdfDocument.DocumentInformation.Creator = "Ophthal";
        pdfDocument.DocumentInformation.Keywords = "Dott. " + doctor;
        pdfDocument.DocumentInformation.Subject = "Relazione";
        pdfDocument.DocumentInformation.Title = "Relazione " + LName + " " + FName + "_" + relData;

        // Set page size
        // ------------------------------------------------------------------------------------------------------------------------
        pdfDocument.PageSettings.Size = Syncfusion.Pdf.PdfPageSize.A4;

        // Set margin for all the pages
        pdfDocument.PageSettings.Margins.Left = 20F;
        pdfDocument.PageSettings.Margins.Right = 30F;
        pdfDocument.PageSettings.Margins.Top = 20F;
        pdfDocument.PageSettings.Margins.Bottom = 50F;
        // pdfDocument.PageSettings.Margins.Bottom = 10F;

        // pdfDocument.PageSettings.Margins.All = 40F;

        // Set page orientation
        // ------------------------------------------------------------------------------------------------------------------------
        pdfDocument.PageSettings.Orientation = PdfPageOrientation.Portrait;

        // Set paginate layout
        // ------------------------------------------------------------------------------------------------------------------------
        PdfLayoutFormat format = new PdfLayoutFormat();
        format.Layout = PdfLayoutType.Paginate;

        // Add page to the PDF document
        PdfPage page = pdfDocument.Pages.Add();

        // Obtain PdfGraphics object.
        PdfGraphics g = page.Graphics;
        #endregion

        #region Header & Footer
        // Create Header and Footer font
        // ------------------------------------------------------------------------------------------------------------------------
        PdfFont fontHeader = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Regular);
        PdfFont fontFooter = new PdfStandardFont(PdfFontFamily.Helvetica, 7, PdfFontStyle.Regular);

        #region Header
        // Get document's bounds
        // ------------------------------------------------------------------------------------------------------------------------
        RectangleF bounds = new RectangleF(0, 0, pdfDocument.Pages[0].GetClientSize().Width, 70);

        // Create a Page template that can be used as header.
        // ------------------------------------------------------------------------------------------------------------------------
        PdfPageTemplateElement header = new PdfPageTemplateElement(bounds);

        // Load image for header
        // Scarica l'immagine dal server
        var httpClient = new HttpClient();
        string imageUrl = $"{Env.BaseAddress}/img/LB_99_53.png";                      // URL dell'immagine
        var imageBytes = await httpClient.GetByteArrayAsync(imageUrl);

        PdfGridCellStyle HeadLogoStyle = new PdfGridCellStyle();
        HeadLogoStyle.Borders.Left.Width = 0F;
        HeadLogoStyle.Borders.Right.Width = 0F;
        HeadLogoStyle.Borders.Top.Width = 0F;
        HeadLogoStyle.Borders.Bottom.Width = 0F;
        HeadLogoStyle.CellPadding = new PdfPaddings(0, 0, 0, 0);

        // Setup font for Dati Testata
        PdfStandardFont SideFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold | PdfFontStyle.Italic);
        PdfStandardFont hHeadFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 16, PdfFontStyle.Bold | PdfFontStyle.Italic);

        PdfStandardFont PdPFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 8, PdfFontStyle.Bold);
        PdfStandardFont FootFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 9, PdfFontStyle.Bold | PdfFontStyle.Italic);

        // Specify the style for bottom
        PdfGridCellStyle HeadStyle = new PdfGridCellStyle();
        HeadStyle.Borders.Left.Width = 0F;
        HeadStyle.Borders.Right.Width = 0F;
        HeadStyle.Borders.Top.Width = 0F;
        HeadStyle.Borders.Bottom.Width = 0F;
        HeadStyle.CellPadding = new PdfPaddings(15, 10, 0, 0);
        HeadStyle.StringFormat = new PdfStringFormat(PdfTextAlignment.Center);

        // Usa un MemoryStream per creare il PdfBitmap
        using (MemoryStream imageStream = new MemoryStream(imageBytes))
        {
            PdfBitmap image = new PdfBitmap(imageStream);

            // Draw the image in the header.
            header.Graphics.DrawImage(image, 5, 15);
        }

        header.Graphics.DrawString("DOTT. " + doctor, hHeadFont, PdfBrushes.Black, 100, 14);
        header.Graphics.DrawString(specialization, hHeadFont, PdfBrushes.Black, 100, 36);

        PdfPen hPen = new PdfPen(Color.Black);
        hPen.Width = 0.1F;

        PointF hP1 = new PointF();
        PointF hP2 = new PointF();

        // linea verticale
        hP1.X = 85;
        hP1.Y = 0;

        hP2.X = 85;
        hP2.Y = 70;

        header.Graphics.DrawLine(hPen, hP1, hP2);

        // top linea orizzontale
        hP1.X = 0;
        hP1.Y = 70;

        hP2.X = 545;
        hP2.Y = 70;

        header.Graphics.DrawLine(hPen, hP1, hP2);

        // Add the header at the top.
        pdfDocument.Template.Top = header;
        #endregion

        #region Footer
        // Set document's bounds
        // ------------------------------------------------------------------------------------------------------------------------
        RectangleF fBounds = new RectangleF(0, 0, pdfDocument.Pages[0].GetClientSize().Width, 70);

        // Create a Page template that can be used as footer.
        // ------------------------------------------------------------------------------------------------------------------------
        PdfPageTemplateElement footer = new PdfPageTemplateElement(fBounds);

        PdfBrush brush = new PdfSolidBrush(Color.Black);

        // Create page number field.
        PdfPageNumberField pageNumber = new PdfPageNumberField(fontFooter, brush);

        // Create page count field.
        PdfPageCountField count = new PdfPageCountField(fontFooter, brush);

        // Add the fields in composite fields.
        PdfCompositeField compositeField = new PdfCompositeField(fontFooter, brush, "Pag. {0} di {1}", pageNumber, count);

        compositeField.Bounds = footer.Bounds;

        // Draw the composite field in footer.
        compositeField.Draw(footer.Graphics, new PointF(20, 28));

        footer.Graphics.DrawString("Viale Raffaello Sanzio, 60 – scala C, 5° piano – (Piazza Michelangelo) - 95128 Catania (CT)", FootFont, PdfBrushes.Black, 151, 8);
        footer.Graphics.DrawString("Riceve per appuntamento – Tel/Fax: 095371701", FootFont, PdfBrushes.Black, 230, 22);
        footer.Graphics.DrawString("Sito Web: http://www.studiolabruna.it – email: info@studiolabruna.it", FootFont, PdfBrushes.Black, 190, 36);
        footer.Graphics.DrawString(iscrOrdine, FootFont, PdfBrushes.Black, 212, 50);

        PdfPen fPen = new PdfPen(Color.Black);
        fPen.Width = 0.1F;

        PointF fP1 = new PointF();
        PointF fP2 = new PointF();

        // linea verticale
        fP1.X = 85;
        fP1.Y = 0;

        fP2.X = 85;
        fP2.Y = 70;

        footer.Graphics.DrawLine(fPen, fP1, fP2);

        // bottom linea orizzontale
        fP1.X = 0;
        fP1.Y = 0;

        fP2.X = 545;
        fP2.Y = 0;

        footer.Graphics.DrawLine(fPen, fP1, fP2);

        // Add the footer template at the bottom.
        pdfDocument.Template.Bottom = footer;
        #endregion
        #endregion

        #region Prima parte: Dati Testata
        PdfFont fieldPaziente = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold | PdfFontStyle.Italic);
        PdfFont fieldHelvBold = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold | PdfFontStyle.Italic);

        #region Imposta griglia Dati Testata
        // Create the head grid
        PdfGrid HeadPdfGrid = new PdfGrid();

        PdfGridCellStyle posCellStyleP0 = new PdfGridCellStyle();
        posCellStyleP0.Borders.Left.Width = 0;
        posCellStyleP0.Borders.Right.Width = 0;
        posCellStyleP0.Borders.Top.Width = 0;
        posCellStyleP0.Borders.Bottom.Width = 0;
        posCellStyleP0.CellPadding = new PdfPaddings(0, 3, 6, 0);

        PdfGridCellStyle posCellStyleP1 = new PdfGridCellStyle();
        posCellStyleP1.Borders.Left.Width = 0;
        posCellStyleP1.Borders.Right.Width = 0;
        posCellStyleP1.Borders.Top.Width = 0;
        posCellStyleP1.Borders.Bottom.Width = 0;
        posCellStyleP1.CellPadding = new PdfPaddings(0, 3, 12, 0);


        // Add the rows to head grid
        PdfGridRow row0 = HeadPdfGrid.Rows.Add();
        PdfGridRow row1 = HeadPdfGrid.Rows.Add();

        //Adding grid style
        PdfGridStyle gridStyle = new PdfGridStyle();

        //Allow grid to overflow horizontally
        gridStyle.AllowHorizontalOverflow = true;

        //Adding cell spacing between cells
        gridStyle.CellSpacing = 0F;

        HeadPdfGrid.Style = gridStyle;

        // Add the columns to head grid
        HeadPdfGrid.Columns.Add(2);

        // Set columns's width
        HeadPdfGrid.Columns[0].Width = 100;
        HeadPdfGrid.Columns[1].Width = 430;

        // Set columns merged
        // HeadPdfGrid.Rows[0].Cells[0].RowSpan = 2;
        #endregion

        #region Inserimento Dati Testata
        // Set the HeadPdfGrid's value
        PdfTextElement val;

        HeadPdfGrid.Rows[0].Cells[0].Style = posCellStyleP0;
        HeadPdfGrid.Rows[0].Cells[1].Style = posCellStyleP0;

        val = new PdfTextElement(" ", fieldPaziente, PdfBrushes.Black);                     // 0-0
        HeadPdfGrid.Rows[0].Cells[0].Value = val;

        val = new PdfTextElement(LName + " " + FName, fieldPaziente, PdfBrushes.Black);     // 0-1
        HeadPdfGrid.Rows[0].Cells[1].Value = val;

        HeadPdfGrid.Rows[1].Cells[0].Style = posCellStyleP1;
        HeadPdfGrid.Rows[1].Cells[1].Style = posCellStyleP1;

        val = new PdfTextElement(" ", fieldPaziente, PdfBrushes.Black);                     // 1-0
        HeadPdfGrid.Rows[1].Cells[0].Value = val;

        val = new PdfTextElement("presenta il seguente quadro oculare:", fieldHelvBold, PdfBrushes.Black);          // 1-1
        HeadPdfGrid.Rows[1].Cells[1].Value = val;

        PdfLayoutResult result = HeadPdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, 80));
        #endregion
        #endregion

        #region Seconda parte: Dati Relazione
        // Create field's name and field's font
        // ------------------------------------------------------------------------------------------------------------------------
        PdfFont fieldNameFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 11, PdfFontStyle.Bold);
        PdfFont fieldFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11, PdfFontStyle.Regular);

        PdfFont fieldDateFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11, PdfFontStyle.Bold);
        PdfFont fieldValueFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11, PdfFontStyle.Regular);

        PdfFont italicdFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10, PdfFontStyle.Italic);

        #region Definizione stile celle Visita
        // Specify the style for head's cell
        PdfGridCellStyle posCellStyleEH = new PdfGridCellStyle();
        posCellStyleEH.Borders.Left.Width = 0;
        posCellStyleEH.Borders.Right.Width = 0;
        posCellStyleEH.Borders.Top.Width = 0;
        posCellStyleEH.Borders.Bottom.Width = 0;
        posCellStyleEH.CellPadding = new PdfPaddings(0, 0, 0, 0);

        PdfGridCellStyle posCellStyleH = new PdfGridCellStyle();
        posCellStyleH.Borders.Left.Width = 0;
        posCellStyleH.Borders.Right.Width = 0;
        posCellStyleH.Borders.Top.Width = 0;
        posCellStyleH.Borders.Bottom.Width = 0;
        posCellStyleH.CellPadding = new PdfPaddings(0, 3, 6, 2);

        PdfGridCellStyle posCellStyleV = new PdfGridCellStyle();
        posCellStyleV.Borders.Left.Width = 0;
        posCellStyleV.Borders.Right.Width = 0;
        posCellStyleV.Borders.Top.Width = 0;
        posCellStyleV.Borders.Bottom.Width = 0;
        posCellStyleV.CellPadding = new PdfPaddings(0, 3, 6, 2);

        PdfGridCellStyle posCellStyleH1 = new PdfGridCellStyle();
        posCellStyleH1.Borders.Left.Width = 0;
        posCellStyleH1.Borders.Right.Width = 0;
        posCellStyleH1.Borders.Top.Width = 0;
        posCellStyleH1.Borders.Bottom.Width = 0;
        posCellStyleH1.CellPadding = new PdfPaddings(0, 3, 0, 2);

        PdfGridCellStyle posCellStyleV1 = new PdfGridCellStyle();
        posCellStyleV1.Borders.Left.Width = 0;
        posCellStyleV1.Borders.Right.Width = 0;
        posCellStyleV1.Borders.Top.Width = 0;
        posCellStyleV1.Borders.Bottom.Width = 0;
        posCellStyleV1.CellPadding = new PdfPaddings(0, 3, 0, 2);

        PdfGridCellStyle posCellStyleH2 = new PdfGridCellStyle();
        posCellStyleH2.Borders.Left.Width = 0;
        posCellStyleH2.Borders.Right.Width = 0;
        posCellStyleH2.Borders.Top.Width = 0;
        posCellStyleH2.Borders.Bottom.Width = 0;
        posCellStyleH2.CellPadding = new PdfPaddings(0, 3, 0, 6);

        PdfGridCellStyle posCellStyleV2 = new PdfGridCellStyle();
        posCellStyleV2.Borders.Left.Width = 0;
        posCellStyleV2.Borders.Right.Width = 0;
        posCellStyleV2.Borders.Top.Width = 0;
        posCellStyleV2.Borders.Bottom.Width = 0;
        posCellStyleV2.CellPadding = new PdfPaddings(0, 3, 0, 6);

        PdfGridCellStyle posCellStyleH3 = new PdfGridCellStyle();
        posCellStyleH3.Borders.Left.Width = 0;
        posCellStyleH3.Borders.Right.Width = 0;
        posCellStyleH3.Borders.Top.Width = 0;
        posCellStyleH3.Borders.Bottom.Width = 0;
        posCellStyleH3.CellPadding = new PdfPaddings(0, 3, 12, 6);

        PdfGridCellStyle posCellStyleH4 = new PdfGridCellStyle();
        posCellStyleH4.Borders.Left.Width = 0;
        posCellStyleH4.Borders.Right.Width = 0;
        posCellStyleH4.Borders.Top.Width = 0;
        posCellStyleH4.Borders.Bottom.Width = 0;
        posCellStyleH4.CellPadding = new PdfPaddings(0, 3, 6, 6);

        PdfGridCellStyle posCellStyleN = new PdfGridCellStyle();
        posCellStyleN.Borders.Left.Width = 0;
        posCellStyleN.Borders.Right.Width = 0;
        posCellStyleN.Borders.Top.Width = 0;
        posCellStyleN.Borders.Bottom.Width = 0F;
        posCellStyleN.CellPadding = new PdfPaddings(3, 3, 14, 0);
        #endregion

        #region Imposta griglia Dati Visita
        // Create Grid
        PdfGrid RelPdfGrid = new PdfGrid();

        // Add Columns
        RelPdfGrid.Columns.Add(3);

        // Add Rows
        PdfGridRow rowV00 = RelPdfGrid.Rows.Add();    // "Diagnosi"
        PdfGridRow rowV01 = RelPdfGrid.Rows.Add();    // "OD," + DiagnosiOD
        PdfGridRow rowV02 = RelPdfGrid.Rows.Add();    // "OS," + DiagnosiOS

        PdfGridRow rowV03 = RelPdfGrid.Rows.Add();    // "Schirmer  test tipo 2 (basale)"
        PdfGridRow rowV04 = RelPdfGrid.Rows.Add();    // "OD," + SHIRMER_Od
        PdfGridRow rowV05 = RelPdfGrid.Rows.Add();    // "OS," + SHIRMER_Os

        PdfGridRow rowV06 = RelPdfGrid.Rows.Add();    // "Segmento anteriore"
        PdfGridRow rowV07 = RelPdfGrid.Rows.Add();    // "OD," + Seg_Ant_Od
        PdfGridRow rowV08 = RelPdfGrid.Rows.Add();    // "OS," + Seg_Ant_Os

        PdfGridRow rowV09 = RelPdfGrid.Rows.Add();    // "Visus"
        PdfGridRow rowV10 = RelPdfGrid.Rows.Add();    // "OD," + Visus_Od
        PdfGridRow rowV11 = RelPdfGrid.Rows.Add();    // "OS," + Visus_Os

        PdfGridRow rowV12 = RelPdfGrid.Rows.Add();    // "Tono oculare (valori normali fino a 20)"
        PdfGridRow rowV13 = RelPdfGrid.Rows.Add();    // "OD," + TONO_Od
        PdfGridRow rowV14 = RelPdfGrid.Rows.Add();    // "OS," + TONO_Os

        PdfGridRow rowV15 = RelPdfGrid.Rows.Add();    // "Fundus in midriasi con indentazione"
        PdfGridRow rowV16 = RelPdfGrid.Rows.Add();    // "OD," + Fundus_Od
        PdfGridRow rowV17 = RelPdfGrid.Rows.Add();    // "OS," + Fundus_Os

        PdfGridRow rowV18 = RelPdfGrid.Rows.Add();    // "Si rilascia su richiesta dell"interessato/a per gli usi consentiti dalla legge"
        PdfGridRow rowV19 = RelPdfGrid.Rows.Add();    // DateTime.Now.ToShortDateString()

        // Set Columns's width
        RelPdfGrid.Columns[0].Width = 100;
        RelPdfGrid.Columns[1].Width = 40;
        RelPdfGrid.Columns[2].Width = 390;

        // Set .Rows[0].Cells[0].RowSpan and Rows[0].Cells[2].ColumnSpan
        RelPdfGrid.Rows[0].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[3].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[6].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[9].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[12].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[15].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[18].Cells[1].ColumnSpan = 2;
        RelPdfGrid.Rows[19].Cells[1].ColumnSpan = 2;
        #endregion

        #region Inserimento Dati Relazione
        // Set the HeadPdfGrid's value
        PdfTextElement value;

        RelPdfGrid.Rows[0].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[0].Cells[1].Style = posCellStyleH;            // "Diagnosi"

        RelPdfGrid.Rows[1].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[1].Cells[1].Style = posCellStyleH1;           // "OD,"
        RelPdfGrid.Rows[1].Cells[2].Style = posCellStyleV1;           // DiagnosiOD

        RelPdfGrid.Rows[2].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[2].Cells[1].Style = posCellStyleH2;           // "OS,"
        RelPdfGrid.Rows[2].Cells[2].Style = posCellStyleV2;           // DiagnosiOS

        RelPdfGrid.Rows[3].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[3].Cells[1].Style = posCellStyleH;            // "Schirmer  test tipo 2 (basale)"

        RelPdfGrid.Rows[4].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[4].Cells[1].Style = posCellStyleH1;           // "OD,"
        RelPdfGrid.Rows[4].Cells[2].Style = posCellStyleV1;           // SHIRMER_Od

        RelPdfGrid.Rows[5].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[5].Cells[1].Style = posCellStyleH2;           // "OS,"
        RelPdfGrid.Rows[5].Cells[2].Style = posCellStyleV2;           // SHIRMER_Os

        RelPdfGrid.Rows[6].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[6].Cells[1].Style = posCellStyleH;            // "Segmento anteriore"

        RelPdfGrid.Rows[7].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[7].Cells[1].Style = posCellStyleH1;           // "OD,"
        RelPdfGrid.Rows[7].Cells[2].Style = posCellStyleV1;           // Seg_Ant_Od

        RelPdfGrid.Rows[8].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[8].Cells[1].Style = posCellStyleH2;           // "OS,"
        RelPdfGrid.Rows[8].Cells[2].Style = posCellStyleV2;           // Seg_Ant_Os

        RelPdfGrid.Rows[9].Cells[0].Style = posCellStyleEH;           // colonna side bar
        RelPdfGrid.Rows[9].Cells[1].Style = posCellStyleH;            // "Visus"

        RelPdfGrid.Rows[10].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[10].Cells[1].Style = posCellStyleH1;          // "OD,"
        RelPdfGrid.Rows[10].Cells[2].Style = posCellStyleV1;          // Visus_Od

        RelPdfGrid.Rows[11].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[11].Cells[1].Style = posCellStyleH2;          // "OD,"
        RelPdfGrid.Rows[11].Cells[2].Style = posCellStyleV2;          // Visus_Os

        RelPdfGrid.Rows[12].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[12].Cells[1].Style = posCellStyleH;           // "Tono oculare (valori normali fino a 20)"

        RelPdfGrid.Rows[13].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[13].Cells[1].Style = posCellStyleH1;          // "OD,"
        RelPdfGrid.Rows[13].Cells[2].Style = posCellStyleV1;          // TONO_Od

        RelPdfGrid.Rows[14].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[14].Cells[1].Style = posCellStyleH2;          // "OD,"
        RelPdfGrid.Rows[14].Cells[2].Style = posCellStyleV2;          // TONO_Os

        RelPdfGrid.Rows[15].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[15].Cells[1].Style = posCellStyleH;           // "Fundus in midriasi con indentazione"

        RelPdfGrid.Rows[16].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[16].Cells[1].Style = posCellStyleH1;          // "OD,"
        RelPdfGrid.Rows[16].Cells[2].Style = posCellStyleV1;          // Fundus_Od

        RelPdfGrid.Rows[17].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[17].Cells[1].Style = posCellStyleH2;          // "OD,"
        RelPdfGrid.Rows[17].Cells[2].Style = posCellStyleV2;          // Fundus_Os

        RelPdfGrid.Rows[18].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[18].Cells[1].Style = posCellStyleH3;          // "Si rilascia su richiesta dell"interessato/a per gli usi consentiti dalla legge"

        RelPdfGrid.Rows[19].Cells[0].Style = posCellStyleEH;          // colonna side bar
        RelPdfGrid.Rows[19].Cells[1].Style = posCellStyleH4;          // DateTime.Now.ToShortDateString()


        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[0].Cells[0].Value = value;
        value = new PdfTextElement("Diagnosi", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[0].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[1].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[1].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.DiagnosiOD), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[1].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[2].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[2].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.DiagnosiOS), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[2].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[3].Cells[0].Value = value;
        value = new PdfTextElement("Schirmer  test tipo 2 (basale)", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[3].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[4].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[4].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.SHIRMER_Od), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[4].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[5].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[5].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.SHIRMER_Os), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[5].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[6].Cells[0].Value = value;
        value = new PdfTextElement("Segmento anteriore", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[6].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[7].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[7].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Seg_Ant_Od), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[7].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[8].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[8].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Seg_Ant_Os), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[8].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[9].Cells[0].Value = value;
        value = new PdfTextElement("Visus", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[9].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[10].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[10].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Visus_Od), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[10].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[11].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[11].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Visus_Os), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[11].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[12].Cells[0].Value = value;
        value = new PdfTextElement("Tono oculare (valori normali fino a 20)", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[12].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[13].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[13].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.TONO_Od), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[13].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[14].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[14].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.TONO_Os), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[14].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[15].Cells[0].Value = value;
        value = new PdfTextElement("Fundus in midriasi con indentazione", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[15].Cells[1].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[16].Cells[0].Value = value;
        value = new PdfTextElement("OD,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[16].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Fundus_Od), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[16].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[17].Cells[0].Value = value;
        value = new PdfTextElement("OS,", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[17].Cells[1].Value = value;
        value = new PdfTextElement(FillEmpty(Relazione.Fundus_Os), fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[17].Cells[2].Value = value;

        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[18].Cells[0].Value = value;
        value = new PdfTextElement("Si rilascia su richiesta dell'interessato / a per gli usi consentiti dalla legge", fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[18].Cells[1].Value = value;

        //value = new PdfTextElement(DateTime.Now.ToShortDateString(), fieldNameFont, PdfBrushes.Black);
        value = new PdfTextElement("", fieldFont, PdfBrushes.Black);
        RelPdfGrid.Rows[19].Cells[0].Value = value;
        var TmpDate = relData.Replace(".", "/");
        Console.WriteLine($"🚀 TmpDate: {TmpDate}");

        value = new PdfTextElement(TmpDate, fieldNameFont, PdfBrushes.Black);
        RelPdfGrid.Rows[19].Cells[1].Value = value;
        #endregion

        // Draw PDF grid into the PDF page.
        // RelPdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, result.Bounds.Bottom + 24));

        PdfLayoutResult result2 = RelPdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, result.Bounds.Bottom + 24));
        #endregion

        #region Timbro
        PdfStandardFont TimbroFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 8, PdfFontStyle.Bold);

        PdfGrid TimbroPdfGrid = new PdfGrid();

        TimbroPdfGrid.AllowRowBreakAcrossPages = false;

        PdfGridCellStyle tCellStyle0 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle1 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle2 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle3 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle4 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle5 = new PdfGridCellStyle();
        PdfGridCellStyle tCellStyle6 = new PdfGridCellStyle();

        tCellStyle2.Borders.Left.Width = 0F;
        tCellStyle2.Borders.Right.Width = 0F;
        tCellStyle2.Borders.Top.Width = 0F;
        tCellStyle2.Borders.Bottom.Width = 0F;
        tCellStyle2.CellPadding = new PdfPaddings(16F, 0, 1F, 0);

        tCellStyle3.Borders.Left.Width = 0F;
        tCellStyle3.Borders.Right.Width = 0F;
        tCellStyle3.Borders.Top.Width = 0F;
        tCellStyle3.Borders.Bottom.Width = 0F;
        tCellStyle3.CellPadding = new PdfPaddings(53.2F, 0, 1F, 0);

        if (who == 1)     // Marco
        {
            tCellStyle0.Borders.Left.Width = 0F;
            tCellStyle0.Borders.Right.Width = 0F;
            tCellStyle0.Borders.Top.Width = 0F;
            tCellStyle0.Borders.Bottom.Width = 0F;
            tCellStyle0.CellPadding = new PdfPaddings(25.3F, 0, 0, 0);

            tCellStyle1.Borders.Left.Width = 0F;
            tCellStyle1.Borders.Right.Width = 0F;
            tCellStyle1.Borders.Top.Width = 0F;
            tCellStyle1.Borders.Bottom.Width = 0F;
            tCellStyle1.CellPadding = new PdfPaddings(26F, 0, 1F, 0);

            tCellStyle4.Borders.Left.Width = 0F;
            tCellStyle4.Borders.Right.Width = 0F;
            tCellStyle4.Borders.Top.Width = 0F;
            tCellStyle4.Borders.Bottom.Width = 0F;
            tCellStyle4.CellPadding = new PdfPaddings(10.3F, 0, 1F, 0);

            tCellStyle5.Borders.Left.Width = 0F;
            tCellStyle5.Borders.Right.Width = 0F;
            tCellStyle5.Borders.Top.Width = 0F;
            tCellStyle5.Borders.Bottom.Width = 0F;
            tCellStyle5.CellPadding = new PdfPaddings(28.9F, 0, 1F, 0);

            tCellStyle6.Borders.Left.Width = 0F;
            tCellStyle6.Borders.Right.Width = 0F;
            tCellStyle6.Borders.Top.Width = 0F;
            tCellStyle6.Borders.Bottom.Width = 0F;
            tCellStyle6.CellPadding = new PdfPaddings(18.9F, 0, 1F, 0);
        }
        else                // Pietro
        {
            tCellStyle0.Borders.Left.Width = 0F;
            tCellStyle0.Borders.Right.Width = 0F;
            tCellStyle0.Borders.Top.Width = 0F;
            tCellStyle0.Borders.Bottom.Width = 0F;
            tCellStyle0.CellPadding = new PdfPaddings(25.3F, 0, 0, 0);

            tCellStyle1.Borders.Left.Width = 0F;
            tCellStyle1.Borders.Right.Width = 0F;
            tCellStyle1.Borders.Top.Width = 0F;
            tCellStyle1.Borders.Bottom.Width = 0F;
            tCellStyle1.CellPadding = new PdfPaddings(31.8F, 0, 1F, 0);

            tCellStyle4.Borders.Left.Width = 0F;
            tCellStyle4.Borders.Right.Width = 0F;
            tCellStyle4.Borders.Top.Width = 0F;
            tCellStyle4.Borders.Bottom.Width = 0F;
            tCellStyle4.CellPadding = new PdfPaddings(12.5F, 0, 1F, 0);

            tCellStyle5.Borders.Left.Width = 0F;
            tCellStyle5.Borders.Right.Width = 0F;
            tCellStyle5.Borders.Top.Width = 0F;
            tCellStyle5.Borders.Bottom.Width = 0F;
            tCellStyle5.CellPadding = new PdfPaddings(28.9F, 0, 1F, 0);

            tCellStyle6.Borders.Left.Width = 0F;
            tCellStyle6.Borders.Right.Width = 0F;
            tCellStyle6.Borders.Top.Width = 0F;
            tCellStyle6.Borders.Bottom.Width = 0F;
            tCellStyle6.CellPadding = new PdfPaddings(20.3F, 0, 1F, 0);
        }

        // Add rows to the DataTable.
        PdfGridRow trow0 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow1 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow2 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow3 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow4 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow5 = TimbroPdfGrid.Rows.Add();
        PdfGridRow trow6 = TimbroPdfGrid.Rows.Add();

        // Add the columns to head grid
        TimbroPdfGrid.Columns.Add(1);

        // Adding grid cell style
        PdfGridCellStyle cellStyle = new PdfGridCellStyle();
        cellStyle.Borders.Left.Width = 0.1F;
        cellStyle.Borders.Right.Width = 0.1F;
        cellStyle.Borders.Top.Width = 0.1F;
        cellStyle.Borders.Bottom.Width = 0.1F;

        //Set cell paddings.
        cellStyle.CellPadding = new PdfPaddings(10, 0, 0, 0);

        // Set columns's width
        TimbroPdfGrid.Columns[0].Width = 150;

        //Applying style to grid
        TimbroPdfGrid.Rows[0].Cells[0].Style = tCellStyle0;
        TimbroPdfGrid.Rows[1].Cells[0].Style = tCellStyle1;
        TimbroPdfGrid.Rows[2].Cells[0].Style = tCellStyle2;
        TimbroPdfGrid.Rows[3].Cells[0].Style = tCellStyle3;
        TimbroPdfGrid.Rows[4].Cells[0].Style = tCellStyle4;
        TimbroPdfGrid.Rows[5].Cells[0].Style = tCellStyle5;
        TimbroPdfGrid.Rows[6].Cells[0].Style = tCellStyle6;

        // Set rows values
        val = new PdfTextElement("Dott. " + doctor, TimbroFont, PdfBrushes.Black);       // 0 - 0
        TimbroPdfGrid.Rows[0].Cells[0].Value = val;

        val = new PdfTextElement(specialization, TimbroFont, PdfBrushes.Black);          // 1 - 0
        TimbroPdfGrid.Rows[1].Cells[0].Value = val;

        val = new PdfTextElement(address, TimbroFont, PdfBrushes.Black);                 // 2 - 0
        TimbroPdfGrid.Rows[2].Cells[0].Value = val;

        val = new PdfTextElement(city, TimbroFont, PdfBrushes.Black);                    // 3 - 0
        TimbroPdfGrid.Rows[3].Cells[0].Value = val;

        val = new PdfTextElement(codfisc, TimbroFont, PdfBrushes.Black);                 // 4 - 0
        TimbroPdfGrid.Rows[4].Cells[0].Value = val;

        val = new PdfTextElement(piva, TimbroFont, PdfBrushes.Black);                    // 5 - 0
        TimbroPdfGrid.Rows[5].Cells[0].Value = val;

        val = new PdfTextElement(ordine, TimbroFont, PdfBrushes.Black);                  // 6 - 0
        TimbroPdfGrid.Rows[6].Cells[0].Value = val;

        // Draw PDF grid into the PDF page.
        TimbroPdfGrid.Draw(page, new Syncfusion.Drawing.PointF(350, result2.Bounds.Bottom + 20));
        #endregion

        //Create memory stream.
        MemoryStream memoryStream = new MemoryStream();

        //Save the PDF document.
        pdfDocument.Save(memoryStream);

        //Download the PDF document
        Console.WriteLine($"⏳ saving pdf");
        await JS.SaveAs("Relazione " + LName + " " + FName + "_" + relData + ".pdf", memoryStream.ToArray());
        Console.WriteLine($"📝 saved pdf");
    }
    #endregion

    #region docx
    async void CreateWord()
    {
        Console.WriteLine($"🔽 loading {Env.BaseAddress}WordLayout/marco.docx");

        // FileStream fileStreamPath = new FileStream($"{Env.BaseAddress}WordLayout/marco.docx", FileMode.Open, FileAccess.Read);
        var httpClient = new HttpClient();
        string docUrl = $"{Env.BaseAddress}/WordLayout/marco.docx";                      // URL dell'immagine

        byte[] fileBytes = await httpClient.GetByteArrayAsync(docUrl);

        // WordDocument document = new WordDocument();

        float MarginLeft, MarginRight, MarginTop, MarginBottom;

        string relData = "";

        if (pDataRelazione.Length > 8)
        {
            relData = pDataRelazione.Substring(0, 2) + "." + pDataRelazione.Substring(3, 2) + "." + pDataRelazione.Substring(6, 4);
        }
        else
        {
            relData = pDataRelazione.Substring(0, 2) + "." + pDataRelazione.Substring(2, 2) + "." + pDataRelazione.Substring(4, 4);
        }

        using (MemoryStream fileStream = new MemoryStream(fileBytes))
        {
            // Apri il documento Word dal MemoryStream
            WordDocument document = new WordDocument(fileStream, FormatType.Docx);

            // ... (Modifica il documento come necessario)

            // Console.WriteLine("✅ Documento caricato con successo!");
            // Console.WriteLine(" ");
            // Console.WriteLine("✨ Info Documento");
            // Console.WriteLine($"📝 document.Count {document.Count}");
            // Console.WriteLine($"📝 document.Sections.Count {document.Sections.Count}");

            WTextBody textBody = document.Sections[0].Body;

            Console.WriteLine($"📝 textBody.Count {textBody.Count}");
            Console.WriteLine($"📝 textBody.Paragraphs.Count {textBody.Paragraphs.Count}");
            Console.WriteLine(" ");
            Console.WriteLine("✨ document.Sections[0].PageSetup.Margins");
            Console.WriteLine($"📝 document.Sections[0].PageSetup.Margins.Left {document.Sections[0].PageSetup.Margins.Left}");
            Console.WriteLine($"📝 document.Sections[0].PageSetup.Margins.Right {document.Sections[0].PageSetup.Margins.Right}");
            Console.WriteLine($"📝 document.Sections[0].PageSetup.Margins.Top {document.Sections[0].PageSetup.Margins.Top}");
            Console.WriteLine($"📝 document.Sections[0].PageSetup.Margins.Bottom {document.Sections[0].PageSetup.Margins.Bottom}");
            Console.WriteLine(" ");

            MarginLeft = document.Sections[0].PageSetup.Margins.Left + 15f;
            MarginRight = document.Sections[0].PageSetup.Margins.Right + 25f;
            MarginTop = document.Sections[0].PageSetup.Margins.Top;
            MarginBottom = document.Sections[0].PageSetup.Margins.Bottom;

            //Adding a new section to the document
            // WSection section = document.AddSection() as WSection;
            WSection section = (WSection)document.Sections[0];

            // Console.WriteLine("✨ Info First Section");
            // Console.WriteLine($"📝 document.Sections.FirstItem.EntityType {document.Sections.FirstItem.EntityType}");

            section.PageSetup.Margins.Left = MarginLeft;
            section.PageSetup.Margins.Right = MarginRight;

            //Appends paragraph
            IWParagraph paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            // paragraph.ParagraphFormat.LineSpacing = 17.6f;

            WTextRange textRange = paragraph.AppendText(LName + " " + FName) as WTextRange;
            textRange.CharacterFormat.FontSize = 14f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 12;

            textRange = paragraph.AppendText("presenta il seguente quadro oculare:") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            // //Appends paragraph empty
            // paragraph = section.AddParagraph();
            // paragraph.ParagraphFormat.BeforeSpacing = 0;
            // paragraph.ParagraphFormat.AfterSpacing = 0;

            // textRange = paragraph.AppendText(" ") as WTextRange;
            // textRange.CharacterFormat.FontSize = 12f;
            // textRange.CharacterFormat.FontName = "Times New Roman";


            //Appends paragraph Diagnosi
            Console.WriteLine($"✅ Diagnosi");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Diagnosi") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.DiagnosiOD: {Relazione.DiagnosiOD}");
            textRange = paragraph.AppendText(Relazione.DiagnosiOD) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.DiagnosiOS: {Relazione.DiagnosiOS}");
            textRange = paragraph.AppendText(Relazione.DiagnosiOS) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph Schirmer  test tipo 2 (basale)
            Console.WriteLine($"✅ Schirmer  test tipo 2 (basale)");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Schirmer  test tipo 2 (basale)") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.SHIRMER_Od: {Relazione.SHIRMER_Od}");
            textRange = paragraph.AppendText(Relazione.SHIRMER_Od) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.SHIRMER_Os: {Relazione.SHIRMER_Os}");
            textRange = paragraph.AppendText(Relazione.SHIRMER_Os) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph Segmento anteriore
            Console.WriteLine($"✅ Segmento anteriore");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Segmento anteriore") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Seg_Ant_Od: {Relazione.Seg_Ant_Od}");
            textRange = paragraph.AppendText(Relazione.Seg_Ant_Od) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Seg_Ant_Os: {Relazione.Seg_Ant_Os}");
            textRange = paragraph.AppendText(Relazione.Seg_Ant_Os) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph Visus
            Console.WriteLine($"✅ Visus");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Segmento anteriore") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Visus_Od: {Relazione.Visus_Od}");
            textRange = paragraph.AppendText(Relazione.Visus_Od) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Visus_Os: {Relazione.Visus_Os}");
            textRange = paragraph.AppendText(Relazione.Visus_Os) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph Tono oculare (valori normali fino a 20)
            Console.WriteLine($"✅ Tono oculare (valori normali fino a 20)");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Tono oculare (valori normali fino a 20)") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.TONO_Od: {Relazione.TONO_Od}");
            textRange = paragraph.AppendText(Relazione.TONO_Od) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.TONO_Os: {Relazione.TONO_Os}");
            textRange = paragraph.AppendText(Relazione.TONO_Os) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph Fundus in midriasi con indentazione
            Console.WriteLine($"✅ Fundus in midriasi con indentazione");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 8;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Fundus in midriasi con indentazione") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = true;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OD, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Fundus_Od: {Relazione.Fundus_Od}");
            textRange = paragraph.AppendText(Relazione.Fundus_Od) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("OS, ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            Console.WriteLine($"✅ Relazione.Fundus_Os: {Relazione.Fundus_Os}");
            textRange = paragraph.AppendText(Relazione.Fundus_Os) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = false;
            textRange.CharacterFormat.Italic = false;


            // //Appends paragraph empty
            // paragraph = section.AddParagraph();
            // paragraph.ParagraphFormat.BeforeSpacing = 0;
            // paragraph.ParagraphFormat.AfterSpacing = 0;

            // textRange = paragraph.AppendText(" ") as WTextRange;
            // textRange.CharacterFormat.FontSize = 12f;
            // textRange.CharacterFormat.FontName = "Times New Roman";

            //Appends paragraph Si rilascia su richiesta dell'interessato / a per gli usi consentiti dalla legge
            Console.WriteLine($"✅ Si rilascia su richiesta dell'interessato / a per gli usi consentiti dalla legge");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 12;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText("Si rilascia su richiesta dell'interessato / a per gli usi consentiti dalla legge") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            // //Appends paragraph empty
            // paragraph = section.AddParagraph();
            // textRange = paragraph.AppendText(" ") as WTextRange;
            // textRange.CharacterFormat.FontSize = 12f;
            // textRange.CharacterFormat.FontName = "Times New Roman";

            //Appends paragraph Data relazione
            var TmpDate = relData.Replace(".", "/");
            Console.WriteLine($"✅ Data relazione. {TmpDate}");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 12;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText(TmpDate) as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;
            textRange.CharacterFormat.Italic = false;

            //Appends paragraph empty
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 12;
            paragraph.ParagraphFormat.AfterSpacing = 0;

            textRange = paragraph.AppendText(" ") as WTextRange;
            textRange.CharacterFormat.FontSize = 12f;
            textRange.CharacterFormat.FontName = "Times New Roman";


            //Appends paragraph Timbro
            Console.WriteLine($"✅ Timbro");
            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 16;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("Dott. MARCO LA BRUNA") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("Specialista in Oftalmologia") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("V.le R. Sanzio, 60 Tel 095 371701") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("CATANIA") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("Cod. Fisc. LBR MRC 84M31 C351P") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("Partita IVA 05289740879") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;

            paragraph = section.AddParagraph();
            paragraph.ParagraphFormat.BeforeSpacing = 0;
            paragraph.ParagraphFormat.AfterSpacing = 0;
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            textRange = paragraph.AppendText("Ordine dei Medici CT n° 14037") as WTextRange;
            textRange.CharacterFormat.FontSize = 8f;
            textRange.CharacterFormat.FontName = "Times New Roman";
            textRange.CharacterFormat.Bold = true;



            // WSection t_section = document.AddSection() as WSection;

            // t_section.PageSetup.Margins.Left = MarginLeft;
            // t_section.PageSetup.Margins.Right = MarginRight;
            // t_section.PageSetup.Margins.Top = MarginTop;
            // t_section.PageSetup.Margins.Bottom = MarginBottom;

            // IWParagraph t_paragraph = t_section.AddParagraph();

            // t_paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;

            // WTextRange t_textRange = t_paragraph.AppendText("Dott. MARCO LA BRUNA") as WTextRange;

            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("Specialista in Oftalmologia") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("V.le R. Sanzio, 60 Tel 095 371701") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("CATANIA") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("Cod. Fisc. LBR MRC 84M31 C351P") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("Partita IVA 05289740879") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;

            // t_paragraph = t_section.AddParagraph();
            // t_textRange = t_paragraph.AppendText("Ordine dei Medici CT n° 14037") as WTextRange;
            // t_textRange.CharacterFormat.FontSize = 8f;
            // t_textRange.CharacterFormat.FontName = "Times New Roman";
            // t_textRange.CharacterFormat.Bold = true;


            //Saves the Word document to MemoryStream
            MemoryStream stream = new MemoryStream();
            document.Save(stream, FormatType.Docx);

            //Closes the Word document
            document.Close();
            stream.Position = 0;

            //Download the Word document in the browser
            Console.WriteLine($"⏳ saving docx");
            await JS.SaveAs("Relazione " + LName + " " + FName + "_" + relData + ".docx", stream.ToArray());
            Console.WriteLine($"📝 saved docx");
        }

        //Creating a new document
        // WordDocument document = new WordDocument();
        // WordDocument document = new WordDocument(fileStreamPath, FormatType.Docx);

        // //Adding a new section to the document
        // WSection section = document.AddSection() as WSection;

        // //Set Margin of the section
        // section.PageSetup.Margins.All = 72;

        // //Set page size of the section
        // section.PageSetup.PageSize = new Syncfusion.Drawing.SizeF(612, 792);

        // //Create Paragraph styles
        // WParagraphStyle style = document.AddParagraphStyle("Normal") as WParagraphStyle;
        // // style.CharacterFormat.FontName = "Calibri";
        // // style.CharacterFormat.FontSize = 11f;
        // style.CharacterFormat.FontName = "Times New Roman";
        // style.CharacterFormat.FontSize = 12f;
        // style.ParagraphFormat.BeforeSpacing = 0;
        // style.ParagraphFormat.AfterSpacing = 8;
        // style.ParagraphFormat.LineSpacing = 13.8f;

        // style = document.AddParagraphStyle("Heading 1") as WParagraphStyle;
        // style.ApplyBaseStyle("Normal");
        // // style.CharacterFormat.FontName = "Calibri Light";
        // // style.CharacterFormat.FontSize = 16f;
        // // style.CharacterFormat.TextColor = Syncfusion.Drawing.Color.FromArgb(46, 116, 181);
        // style.CharacterFormat.FontSize = 14f;
        // style.ParagraphFormat.BeforeSpacing = 12;
        // style.ParagraphFormat.AfterSpacing = 6;
        // style.ParagraphFormat.Keep = true;
        // style.ParagraphFormat.KeepFollow = true;
        // style.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;

        // style = document.AddParagraphStyle("Heading 2") as WParagraphStyle;
        // style.ApplyBaseStyle("Normal");
        // style.CharacterFormat.FontSize = 12f;
        // style.ParagraphFormat.BeforeSpacing = 12;
        // style.ParagraphFormat.AfterSpacing = 6;
        // style.ParagraphFormat.Keep = true;
        // style.ParagraphFormat.KeepFollow = true;
        // style.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;

        // IWParagraph paragraph = section.HeadersFooters.Header.AddParagraph();
        // paragraph.ApplyStyle("Normal");
        // paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Left;
        // WTextRange textRange = paragraph.AppendText("Adventure Works Cycles") as WTextRange;
        // textRange.CharacterFormat.FontSize = 12f;
        // textRange.CharacterFormat.FontName = "Calibri";
        // textRange.CharacterFormat.TextColor = Syncfusion.Drawing.Color.Red;

        // //Appends paragraph
        // IWParagraph paragraph = section.AddParagraph();
        // paragraph.ApplyStyle("Heading 1");
        // paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
        // WTextRange textRange = paragraph.AppendText("Adventure Works Cycles") as WTextRange;
        // textRange.CharacterFormat.FontSize = 18f;
        // textRange.CharacterFormat.FontName = "Calibri";

        // //Appends paragraph
        // paragraph = section.AddParagraph();
        // paragraph.ParagraphFormat.FirstLineIndent = 36;
        // paragraph.BreakCharacterFormat.FontSize = 12f;
        // textRange = paragraph.AppendText("Adventure Works Cycles, the fictitious company on which the AdventureWorks sample databases are based, is a large, multinational manufacturing company. The company manufactures and sells metal and composite bicycles to North American, European and Asian commercial markets. While its base operation is in Bothell, Washington with 290 employees, several regional sales teams are located throughout their market base.") as WTextRange;
        // textRange.CharacterFormat.FontSize = 12f;

        // //Appends paragraph
        // paragraph = section.AddParagraph();
        // paragraph.ParagraphFormat.FirstLineIndent = 36;
        // paragraph.BreakCharacterFormat.FontSize = 12f;
        // textRange = paragraph.AppendText("In 2000, AdventureWorks Cycles bought a small manufacturing plant, Importadores Neptuno, located in Mexico. Importadores Neptuno manufactures several critical subcomponents for the AdventureWorks Cycles product line. These subcomponents are shipped to the Bothell location for final product assembly. In 2001, Importadores Neptuno, became the sole manufacturer and distributor of the touring bicycle product group.") as WTextRange;
        // textRange.CharacterFormat.FontSize = 12f;

        // //Saves the Word document to MemoryStream
        // MemoryStream stream = new MemoryStream();
        // document.Save(stream, FormatType.Docx);

        // //Closes the Word document
        // document.Close();
        // stream.Position = 0;

        // //Download the Word document in the browser
        // JS.SaveAs("Sample.docx", stream.ToArray());
    }
    #endregion
}
